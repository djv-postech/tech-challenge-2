name: fastfood-management-CICD

on:
  push:

jobs:
 
  unit-tests:
    
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - run: cd fastfood-management-system && mvn test

    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        generate-branches-badge: true
        jacoco-csv-file: >
          fastfood-management-system/fastfood-system-application/target/site/jacoco/jacoco.csv

    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
        echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
    
  
  sonar-analisys:
      
      needs: unit-tests
      runs-on: ubuntu-latest
     
      steps:
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: 17
            distribution: 'zulu'
        - name: Cache SonarCloud packages
          uses: actions/cache@v3
          with:
            path: ~/.sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
        - name: Cache Maven packages
          uses: actions/cache@v3
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2
        - name: analyze
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          run: cd fastfood-management-system && mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=djv-postech_tech-challenge-2
 
  build:
    
    runs-on: ubuntu-latest
    needs: sonar-analisys
    
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: cd fastfood-management-system && mvn clean install -DskipTests --file pom.xml

  docker:
     runs-on: ubuntu-latest
     needs: build
     
     steps:
      - uses: actions/checkout@v3
      - run: cd fastfood-management-system/fastfood-system-application
      - uses: kciter/aws-ecr-action@v4
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          repo: docker/repo
          region: us-east-1
          tags: latest
          create_repo: true
          image_scanning_configuration: false
          set_repo_policy: false
         

      
  
   deployEKS:
      needs: build
      runs-on: ubuntu-latest
     
      steps:
   
      - uses: actions/checkout@v3
 
      - name: Configurando Credenciais AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: us-east-1
 
      - run: git clone https://github.com/djv-postech/fastfood-management-ci-infra.git
 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3
 
      - run: terraform -chdir=fastfood-management-ci-infra init
 
      - run: terraform -chdir=fastfood-management-ci-infra apply  -auto-approve
 
      - name: Kubectl Tool
        uses: Azure/setup-kubectl@v3
 
      - run: aws sts get-caller-identity
       
      - run: aws eks update-kubeconfig --region us-east-1 --name fastfood-management-cluster
 
      - run: kubectl get svc
 
      - run: kubectl apply -f fastfood-management-ci-infra/k8s/fastfood-mongo-secrets.yml
      - run: kubectl apply -f fastfood-management-ci-infra/k8s/fastfood-secrets.yml
      - run: kubectl apply -f fastfood-management-ci-infra/k8s/fastfood-mongo-svc.yml
      # - run: kubectl apply -f fastfood-management-ci-infra/k8s/fastfood-sc.yml
      - run: kubectl apply -f fastfood-management-ci-infra/k8s/fastfood-svc.yml
      # - run: kubectl apply -f fastfood-management-ci-infra/k8s/fastfood-mongo-pvc.yml
      - run: kubectl apply -f fastfood-management-ci-infra/k8s/fastfood-mongo-statefulset.yml
      - run: kubectl apply -f fastfood-management-ci-infra/k8s/fastfood-deployment.yml
      - run: kubectl apply -f fastfood-management-ci-infra/k8s/fastfood-hpa.yml
      - run: kubectl apply -f fastfood-management-ci-infra/k8s/components.yaml

 
